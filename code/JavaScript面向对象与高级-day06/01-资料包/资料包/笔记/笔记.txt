1. 函数的参数
    -> length 属性
        在 js 中凡是定义了一个函数, 就是定义了一个对象. 
        函数与一般的数据是一样的使用: 赋值, 可以调用.

        函数作为对象有一个属性 length 该属性用于描述在定义的时候函数的 参数个数

    -> arguments 对象
        所谓 arguments, 就是参数的复数形式. 也就是在调用函数的时候, 会给函数传入参数
        但是有时不确定需要传入多少参数, 所有在调用时传入的参数都会被 arguments 获取到.
        简单的说 arguments 中存储的就是参数的集合.

        在实际调用的时候 arguments 就是实际调用时传入的所有参数

        问题: 如何判断函数参数调用符合函数的定义?
              如何判断调用时的参数个数与函数定义时的参数个数一样?
            函数名.length === arguments.length

        使用 arguments 可以保证在函数定义不写参数的情况下, 也可以获得函数调用时传入的所有参数.
        因此在不确定函数有多少参数和需要函数有动态参数的时候使用.
        1> 比如, 求两个数组中较大的数字
            function max( a, b ) {
                return a > b ? a : b;
            }
            如果需要判断多个数字中较大的数字
            希望: max( 1, 3, 2, -9, 4 ); 希望随意的提供参数.
        2> 希望函数有动态参数, 在传入不同参数的时候有不同的结果
            在 jq 中, css, attr, val, html, text, ...
            接下来实现一个 css 方法, 该方法提供两个参数, 一个是 dom 元素, 第二个是一个字符串
            用于解释获得什么样式属性值; 也可以带有三个参数, 第一个参数是 dom 元素, 第二个参数
            是字符串, 用于告知需要处理哪一个样式, 第三个参数就是对应的样式值.

            css( div, 'border' ) -> 获得 div 元素的 border 样式属性的值
            css( div, 'border', '1px solid red' ) 为元素 div 设置 border 的样式.


2. 将字符串作为代码执行
    -> eval 函数
        该函数可以将一个字符串作为一段 js 代码来执行

    -> Function 函数
        由于 eval 可以直接执行 字符串. 因此未来限制 eval 的功能, 常常会使用 Function 来代替 eval 执行
        eval( 'var a = 123;' ) 在全局作用范围内增加了一个变量 a. 因此不是非常的安全.

        Function 就是用于生成函数的函数. Function 就是函数的构造函数.

        语法:
            new Function( '参数1', '参数2', ..., '方法体' ) -> 返回一个函数
        
        例如写一个函数
            function foo () {
                console.log( 'hello' );
            }

            该函数可以使用 Function 来声明
            var foo = new Function( 'console.log( "Hello" )' );


        例如写一个函数
            function foo( a, b ) {
                console.log( 'a + b = ' + ( a + b ) );
            }
            该函数有参数 a 和 b, 两个参数, 函数体就是 打印的语句
            var foo = new Function( 'a', 'b', 'console.log( "a + b = " + ( a + b ) );' )

        练习: 
            使用 Function 创建两个函数完成练习
            1> 求两个数字的和 并返回结果
            2> 求任意个数字的和, 并返回结果
    

3. 函数与 Function 的关系

    函数就是 Function 的实例. 即 Function 就是函数的构造函数.
        实例对象有一个继承的 constructor 方法, 该方法指向就是构造函数.
        自己定义一个函数( 任意的函数 ), 可以知道函数的 constructor 就是 Function
        得到结论 函数就是 Function 的实例.
    
    Function 也是函数, 那么有什么结论呢?
        Function 就是 Function 的实例. 即 自己就是自己的实例.

    作业: 将自定义函数与 Function 和 Function.prototype 的完整关系绘制出来.

    -> 函数, Function, 与 Function.prototype
    -> 基于函数的原型构造实例三角形

4. Object 与 Function
    -> Object 与 Function 的关系
        Object 是 函数, 因此在 Function 中, 它就是实例对象. 因此就构成一个三角形.

        可以使用 __proto__ 来访问对象的原型对象.
            在讨论 .prototype 的时候是通过 函数 访问原型
            在讨论 .__proto__ 的时候是通过 实例对象 访问原型
        
        在实际构建对象的时候, 扩展实例成员, 一般都使用 原型增加方法的形式( 原型继承 ).
            一般在使用的时候利用 构造函数.prototype 来添加, 不要使用 实例对象.__proto__ 来添加.

        原型继承的整个关系( 原型链 )
            可以知道所有的对象都有原型, 一步一步往上走, 都会汇集到 Object.prototype 中
            Object.prototype 是顶级的对象.

        Function.prototype 继承自谁?
            任意一个函数继承自 Function.prototype. 可以看做是 Function 的实例.
            而 Function.prototype 又是继承自 Object.prototype.


    -> instanceof 运算符
        该运算符判断某一个对象是否为某个构造函数的实例. 现在需要纠正.
        判断一个对象的原型链中是否含有这个构造函数的 prototype 所表示的对象

        o instancof Func

        如果 Func.prototype 在 o 对象的原型链中, 那么返回值就是 true, 否则就是 false.



5. 原型链的完整形式
    -> 写一个构造函数, 该构造函数继承自 Function.prototype, 构造函数是 Function 的实例
    -> 凡是写一个构造函数, 就有一个原型存在, 例如 Foo.prototype
    -> 由构造函数所创建出来的对象, 继承自 构造函数.prototype
    -> 构造函数.prototype 继承自 Object.prototype
    -> 使用 __proto__ 可以同时实例直接访问原型





























































