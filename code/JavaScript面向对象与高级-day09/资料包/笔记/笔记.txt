1. 闭包的概念
    字面理解: 
    闭, 是说封闭, 简单的说就是在函数中内部定义的变量无法在外界被访问到.
        function foo () {
            var num = 123;
        }

        ... 
        console.log( num );

        包, 即为包裹, 一个环绕的结构. 简单的说就是函数. 
        在 js 中 包的结构很多, 只要是使用 {  } 包裹的语句都是包裹结构.
        只是结合闭的要求, 函数就是符合闭包结构的一种语法.
    
    所谓的闭包就是 函数. 即在函数中定义的变量无法在外界直接被访问. 而函数具有包裹的作用. 因此函数就是闭包.

    常见的说法
    1> 可以访问函数内部的数据的函数
    2> 所谓的闭包就是有未绑定到特定对象的代码组成的语法块( 含有的自由变量的语法结构 )

2. 闭包解决了什么问题

    函数内部定义的变量, 外界是无法访问的. 即 闭包中的数据外界无法直接访问.

    闭包提供了一个受限制的访问区域.

    如何去访问闭包( 函数 )中的数据
    
    -> 利用返回值
        function foo () {
            var num = 123;
            return num;
        } 
    -> 返回一个对象返回一个函数
        function foo () {
            var num = 123;
            function tmpFn () {
                return num;
            }
            return tmpFn;
        }

        var fn = foo();  // 调用后, 函数内部会生成一个 变量 num, 同时将函数 tmpFn 返回赋值给 fn
        // 如果想要访问 foo 内部定义的 变量 num
        // 直接调用 fn 函数即可

    -> 如果需要获取两个甚至是两个以上的数据, 应该如果处理
        function foo () {
            var num1 = 123;
            var num2 = 456;

            return {
                num1: function () {
                    return num1;
                },
                num2: function () {
                    return num2;
                }
            }
        }


3. 使用闭包的举例
    -> 缓存
        闭包允许函数带有一个缓存结构, 也就是说只有该函数可以使用的一个私有的独立的内存空间
        用法
            var func = (function () {  
                // 内存私有
                
                return function () {
                    // 函数体
                };
            })(); 
        

        例如, 在实际开发中会有频繁的获取元素的行为. 获取元素最简单的处理形式就是使用选择器.
        在 h5 中, 引入了 一个新的 方法 document.querySelectorAll 

        var $ = function ( selector ) {
            return document.querySelectorAll( selector ); 
        };

        在完成一个页面应用的时候, 一般会频繁的对元素进行获取操作. 为了提高效率我们可以将元素缓存.

        $( ... ).事件(function () {
            $( this )
            $( ... )
        })

        缓存代码
        var $ = (function () {

            var cache = {};
        
            return function ( selector ) {
                // 首先判断缓存中有没有, 有的就直接使用缓存中的, 如果没有就再来获取
                var nodeList;
                if ( cache[ selector ] ) {
                    // 有
                    nodeList = cache[ selector ];
                } else {
                    // 没有
                    nodeList = document.querySelectorAll( selector ); 
                    cache[ selector ] = nodeList; // 在 缓存中存起来
                }
                return nodeList;
            };
        })();


        为了更高效的时候, 缓存需要一个容量. 所以给定一个 length 属性, 缓存中存储数据如果超过了
        这个 length 那么就将最早加入的数据删除.

        在私有空间中引入一个数组, 用于存储 键, 
        1> 保存顺序
        2> 可以获得长度


        var length = 3;
        var $ = (function () {

            var cacheKeys = [];
            var cache = {};
        
            return function ( selector ) {
                // 首先判断缓存中有没有, 有的就直接使用缓存中的, 如果没有就再来获取
                var nodeList;
                if ( cache[ selector ] ) {
                    // 有
                    nodeList = cache[ selector ];
                } else {
                    // 没有
                    nodeList = document.querySelectorAll( selector ); 

                    // 存储之前需要判断长度
                    if ( cacheKeys.length >= length ) {
                        // 需要删除
                        var key = cacheKeys.shift();
                        delete cache[ key ];
                    }

                    cacheKeys.push( selector );
                    cache[ selector ] = nodeList; // 在 缓存中存起来
                }
                return nodeList;
            };
        })();



    -> 避免污染
        什么是污染. 在说道污染的时候, 就是说变量名的覆盖.
        也就是说以前定义的函数, 变量, 对象等数据可能会被重新生成的变量所覆盖, 以至于无法使用.

        处理办法: 尽可能的不要在全局范围内( 0 级作用域 )定义过多的数据. 如果必须要定义尽量之定义一个.

        我们在实现一些特殊功能的时候, 有需要很多辅助函数或变量, 那么有不应该定义在全局范围内, 那么如何处理呢?

        可以定义一个函数, 那么这个函数名就是放在全局范围内的一个名字( 不要重名 )

        var func = function () {

            // 所有的代码逻辑写在这里
            function foo() {
            }

            function tool () {
            
            }

            // ...
        }

        func();

        在进行简化

        (function () {

            // 所有的代码逻辑写在这里
            function foo() {
            }

            function tool () {
            
            }

            // ...

        })()

        // 沙箱模式
                




    -> 模拟块级作用域
        在 js 中没有块级作用域. 块级作用域使用花括号来限定.
        例如求 1 到 100 的和


4. 函数的四种调用模式
    这部分的知识点实际上就是在讨论一个函数中 this 的指向问题.
    -> 分类
        函数调用模式
        方法调用模式
        构造器调用模式
        上下文调用模式
        bind 模式
    -> 函数调用模式
        分辨: 函数调用没有任何引导数据, 就只有一个函数名来调用.
        在函数调用模式中 this 表示 全局对象( 在浏览器中 就是 window )
    -> 方法调用模式   
        分辨: 方法调用模式一定要有一个对象, 是对象引导方法来调用的.
        在方法模式中 this 表示引导对象( 当前对象 )
    -> 构造其调用模式
        分辨: 方法在调用的时候 前面有一个 new 关键字引导.
        在方法中 this 的含义就是刚刚被创建出来的 对象

        1> 构造函数的执行过程原理( 复述 )
            使用 new 创建对象
            构造函数调用, 将刚刚创建的对象引用传入到构造函数中的 this 中
            因此 this 就是当前刚刚创建出来的对象
            利用 对象的 动态特性来给对象增加成员

            在调用 new 的时候, new 后面所跟的函数是什么, 创建出来的对象就继承什么的原型.


        2> 构造函数中的 return 
            1> 在构造函数中 使用 return 可以结束构造函数的执行. 直接将当前的 this 直接返回.
            2> 如果 return 后跟是一个基本数据类型( 值类型 )或空类型, 这个数据无效, return 起作用.
            3> 如果 return 后跟的是一个引用类型( 对象 ), 那么调用构造函数就会返回该数据. 创建出来的对象就会被 "丢弃"

    -> 上下文调用模式
        允许调用者控制函数中 this 的含义, 那么这样的调用就是上下文调用.
        上下文, 就是环境, 依托的对象.
            divElem.getElementsByName( 'div' )
            上下文就是 this
        上下文调用有两个方法可用
        1> apply
            如果函数调用需要提供参数, apply 方法的第一个参数用于指定 函数中 this 的含义.
            如果第一个参数传入的是 null 或 undefined, 那么 this 就是 window. 
            如果第一个参数传入的是 基本数据类型( 值类型 ), 那么会将值类型转换成对应的包装类型, this 指向包装对象
            如果第一个参数传入的是 对象, 那么 this 就是这个对象.

            apply 方法的第二个参数是一个数组, 里面包含需要传给函数的所有参数


        2> call
            如果函数调用需要提供参数, call 方法的第一个参数用于指定 函数中 this 的含义.
            如果第一个参数传入的是 null 或 undefined, 那么 this 就是 window. 
            如果第一个参数传入的是 基本数据类型( 值类型 ), 那么会将值类型转换成对应的包装类型, this 指向包装对象
            如果第一个参数传入的是 对象, 那么 this 就是这个对象.

            call 方法的第二个参数, 以及其他参数分别表示需要传入函数的各个参数


        共同点: 两个方法都是在指定函数中 this 是指向什么对象.


        js 是一个弱类型的语言, 而是表示数据不是严格的要求数据类型

    -> bind 模式
        如果说使用 apply 或 call 是在调用的时候指定 this 的含义, 那么 bind 就是在调用之前指定 this 的含义.
        提前绑定. 语法

        函数.bind( 对象 ) -> 函数








































































